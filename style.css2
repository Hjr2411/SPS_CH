* ======================== style.css ======================== / :root{ --bg:#0f1115; / Windows 11 dark-like */ --panel:#171a21cc; --border:#2a2f3b; --text:#e6e6e6; --muted:#9aa3b2; --primary:#3b82f6; --primary-ghost:#3b82f622; --accent:#22c55e; --danger:#ef4444; --space-1:8px; --space-2:12px; --space-3:16px; --space-4:24px; --space-5:32px; --radius:12px; } *{box-sizing:border-box} html,body{height:100%} body{margin:0;background:linear-gradient(120deg,#0b0d12,#12141a);color:var(--text);font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,"Helvetica Neue",Arial}

.app{display:grid;grid-template-columns:240px 1fr;grid-template-rows:56px 1fr;grid-template-areas:"topbar topbar" "sidebar content";height:100vh} .topbar{grid-area:topbar;display:flex;align-items:center;justify-content:space-between;padding:0 var(--space-4);backdrop-filter:saturate(1.2) blur(8px);background:#0c0f14aa;border-bottom:1px solid var(--border)} .title{font-weight:700;letter-spacing:.3px} .session{display:flex;align-items:center;gap:12px} .badge{background:var(--primary-ghost);color:#cfe1ff;padding:6px 10px;border-radius:999px;font-size:.85rem} .btn{background:#1c2230;border:1px solid var(--border);color:var(--text);padding:8px 12px;border-radius:10px;cursor:pointer;transition:.2s} .btn:hover{border-color:#3a4252} .btn.primary{background:var(--primary);border-color:#2563eb} .btn.ghost{background:transparent}

.sidebar{grid-area:sidebar;border-right:1px solid var(--border);padding:var(--space-3);display:flex;flex-direction:column;gap:8px;background:#0e1117cc;backdrop-filter:blur(8px)} .nav-btn{all:unset;cursor:pointer;padding:10px 12px;border:1px solid var(--border);border-radius:10px;display:block} .nav-btn:hover{background:#161a22}

.content{grid-area:content;padding:var(--space-4);overflow:auto} .view{animation:fade .2s ease} @keyframes fade{from{opacity:0;transform:translateY(6px)}to{opacity:1;transform:none}}

.card{background:var(--panel);border:1px solid var(--border);border-radius:var(--radius);padding:var(--space-4);box-shadow:0 10px 30px #00000033} .w-420{max-width:420px;margin-inline:auto} .w-120{width:120px} .w-full{width:100%} .mt-8{margin-top:8px}.mt-12{margin-top:12px}.mt-16{margin-top:16px}.mt-22{margin-top:22px} .muted{color:var(--muted)}

.grid-2{display:grid;grid-template-columns:1fr 1fr} .grid-3{display:grid;grid-template-columns:1fr 1fr 1fr} .grid-4{display:grid;grid-template-columns:repeat(4,1fr)} .gap-12{gap:12px}.gap-16{gap:16px}

@media (max-width:1000px){.grid-2,.grid-3,.grid-4{grid-template-columns:1fr}} .compact-form{gap:12px}

.field{display:flex;flex-direction:column;gap:6px;margin-bottom:8px} .input,.select{background:#0f1420;border:1px solid var(--border);color:var(--text);padding:10px 12px;border-radius:10px;outline:none} .input:focus,.select:focus{border-color:#334155;box-shadow:0 0 0 3px #60a5fa33}

.toolbar{display:flex;gap:8px;align-items:center;margin-bottom:8px} .table-wrap{overflow:auto;border:1px solid var(--border);border-radius:12px} .table{width:100%;border-collapse:collapse;font-size:.95rem} .table th,.table td{border-bottom:1px solid var(--border);padding:10px 12px;text-align:left;white-space:nowrap} .table th{position:sticky;top:0;background:#151925;z-index:1} .pager{display:flex;align-items:center;gap:8px;justify-content:flex-end;padding:8px}

.tabs{display:flex;gap:8px;margin-bottom:12px} .tab{background:#111624;border:1px solid var(--border);padding:8px 12px;border-radius:10px;cursor:pointer} .tab.active{background:var(--primary-ghost);border-color:#2b3a55} .tab-panel{animation:fade .2s ease}

.kpi{display:flex;align-items:center;justify-content:center;font-weight:700}

.toast{position:fixed;left:50%;bottom:24px;transform:translateX(-50%);background:#0b1220;border:1px solid var(--border);padding:10px 14px;border-radius:12px;opacity:0;pointer-events:none;transition:.25s} .toast.show{opacity:1;pointer-events:auto}

.actions{display:flex;gap:8px;margin-top:8px} .actions.end{justify-content:flex-end} .check{display:flex;align-items:center;gap:8px;margin:6px 0}

// ======================== app.js ======================== /* global firebase, Chart */

// -------------------- Firebase Config (INSIRA SUAS CHAVES) -------------------- const firebaseConfig = { // TODO: inserir suas chaves do Firebase Realtime Database apiKey: "", authDomain: "", databaseURL: "", projectId: "", storageBucket: "", messagingSenderId: "", appId: "" }; firebase.initializeApp(firebaseConfig); const db = firebase.database();

// -------------------- Util: Toast -------------------- const toastEl = document.getElementById('toast'); function toast(msg, ms = 2200){ toastEl.textContent = msg; toastEl.classList.add('show'); setTimeout(()=>toastEl.classList.remove('show'), ms); }

// -------------------- Util: Hash (SHA-256) -------------------- async function hash(text){ const enc = new TextEncoder(); const buf = await crypto.subtle.digest('SHA-256', enc.encode(text)); return Array.from(new Uint8Array(buf)).map(b=>b.toString(16).padStart(2,'0')).join(''); }

// -------------------- Sessão -------------------- const SESSION_KEY = 'sps_session_v11'; function setSession(u){ localStorage.setItem(SESSION_KEY, JSON.stringify({ id: u.id, nome: u.nome, admin: !!u.admin, ts: Date.now() + 10006060*24 })); } function getSession(){ const raw = localStorage.getItem(SESSION_KEY); if(!raw) return null; try{ const s = JSON.parse(raw); if(Date.now() > s.ts) return null; return s; }catch{ return null; } } function clearSession(){ localStorage.removeItem(SESSION_KEY); }

// -------------------- State -------------------- const state = { charts: {equip:null, cenario:null, analista:null}, lists: {equipamentos:[], cenarios:[]}, user:null };

// -------------------- Views & Nav -------------------- const views = { loginView: document.getElementById('loginView'), userView: document.getElementById('userView'), adminView: document.getElementById('adminView') }; const navLogin = document.getElementById('navLogin'); const navUser  = document.getElementById('navUser'); const navAdmin = document.getElementById('navAdmin'); const userBadge = document.getElementById('userBadge'); const btnLogout = document.getElementById('btnLogout');

function showView(id){ Object.values(views).forEach(v=>v.hidden = true); views[id].hidden = false; document.querySelectorAll('.nav-btn').forEach(b=>{ if(b.dataset.view){ b.classList.toggle('active', b.dataset.view === id); } }); }

function applyAuthUI(){ const s = getSession(); if(!s){ userBadge.textContent = 'Não logado'; btnLogout.hidden = true; navUser.hidden = true; navAdmin.hidden = true; navLogin.hidden = false; showView('loginView'); } else { userBadge.textContent = ${s.nome}${s.admin?' (admin)':''}; btnLogout.hidden = false; navLogin.hidden = true; navUser.hidden = false; navAdmin.hidden = !s.admin; showView(s.admin ? 'adminView' : 'userView'); document.getElementById('uAnalista').value = s.nome; } }

// Nav events Array.from(document.querySelectorAll('.nav-btn')).forEach(btn=>{ btn.addEventListener('click', ()=>{ const v = btn.dataset.view; if(v) showView(v); }); }); btnLogout.addEventListener('click', ()=>{ clearSession(); applyAuthUI(); toast('Sessão encerrada'); });

// -------------------- Login -------------------- const loginNome = document.getElementById('loginNome'); const loginSenha = document.getElementById('loginSenha'); const btnLogin = document.getElementById('btnLogin');

btnLogin.addEventListener('click', doLogin); loginSenha.addEventListener('keydown', e=>{ if(e.key==='Enter') doLogin(); });

async function doLogin(){ const nome = (loginNome.value||'').trim(); const senha = loginSenha.value||''; if(!nome||!senha) return toast('Informe nome e senha'); const h = await hash(senha);

const snap = await db.ref('app/users').once('value'); const val = snap.val()||{}; const entry = Object.entries(val).find(([,u])=> (u && (u.nome||'').trim().toLowerCase()===nome.toLowerCase())); if(!entry) return toast('Usuário não encontrado'); const [id,user] = entry; if(user.senhaHash!==h) return toast('Senha inválida'); if(user.ativo===false) return toast('Usuário inativo'); setSession({id, nome:user.nome, admin:!!user.admin}); loginSenha.value=''; applyAuthUI(); await ensureLists(); await refreshUserTable(); await refreshAdminTables(); toast('Bem-vindo!'); }

// -------------------- Seeds (Opcional) -------------------- async function seedIfEmpty(){ const usersSnap = await db.ref('app/users').once('value'); if(!usersSnap.exists()){ const helio = { nome:'Helio', senhaHash: await hash('12345678'), admin:true, ativo:true }; await db.ref('app/users').push(helio); } const listasSnap = await db.ref('app/listas').once('value'); if(!listasSnap.exists()){ await db.ref('app/listas').set({ equipamentos:["HLR","HHUA","HLREDA","HSS","RTC","VPNSIX","SGV","Claro flex"], cenarios:["Voz","Dados","Voz e dados","Não localizado no SPSWeb","Falha no equipamento","Franquia de dados","Assinante não possui HSS","4G/5G inativo","RESTRICTED"] }); } }

// -------------------- Listas -------------------- async function ensureLists(){ const snap = await db.ref('app/listas').once('value'); const lists = snap.val()||{equipamentos:[], cenarios:[]}; state.lists = lists; fillSelect('uEquipamento', lists.equipamentos); fillSelect('uCenario', lists.cenarios); fillSelect('fEquip', ['(Todos)', ...lists.equipamentos]); fillSelect('fCenario', ['(Todos)', ...lists.cenarios]); } function fillSelect(id, arr){ const sel = document.getElementById(id); sel.innerHTML = ''; (arr||[]).forEach(v=>{ const o = document.createElement('option'); o.value=v; o.textContent=v; sel.appendChild(o); }); }

// -------------------- User: Criar Chamado -------------------- const btnUserSalvar = document.getElementById('btnUserSalvar'); const btnUserNovo   = document.getElementById('btnUserNovo'); const btnUserLimpar = document.getElementById('btnUserLimpar');

btnUserSalvar.addEventListener('click', saveChamadoFromUser); btnUserNovo.addEventListener('click', ()=>clearUserForm(true)); btnUserLimpar.addEventListener('click', ()=>clearUserForm());

function clearUserForm(resetFocus){ document.getElementById('uChamado').value=''; document.getElementById('uLinha').value=''; document.getElementById('uEquipamento').selectedIndex=0; document.getElementById('uCenario').selectedIndex=0; document.getElementById('uData').value=''; if(resetFocus) document.getElementById('uChamado').focus(); }

async function saveChamadoFromUser(){ const s = getSession(); if(!s) return toast('Sessão expirada'); const analista = s.nome; const chamado = (document.getElementById('uChamado').value||'').trim(); const linha = (document.getElementById('uLinha').value||'').trim(); const equipamento = document.getElementById('uEquipamento').value; const cenario = document.getElementById('uCenario').value; const dataEncaminhamento = document.getElementById('uData').value; if(!chamado||!linha||!equipamento||!cenario||!dataEncaminhamento) return toast('Preencha todos os campos');

const now = Date.now(); const data = { analista, chamado, linha, equipamento: equipamento.toUpperCase(), cenario: cenario, dataEncaminhamento, createdAt: now, updatedAt: now, createdBy: s.id, deleted:false }; await db.ref('app/chamados').push(data); toast('Chamado salvo'); clearUserForm(true); await refreshUserTable(); await refreshAdminTables(); }

// -------------------- User Table (meus chamados) -------------------- const userTableBody = document.querySelector('#userTable tbody'); const userSearch = document.getElementById('userSearch'); const userPageSize = document.getElementById('userPageSize'); const userPrev = document.getElementById('userPrev'); const userNext = document.getElementById('userNext'); const userPageInfo = document.getElementById('userPageInfo'); let userRows = []; let userPage=1;

userSearch.addEventListener('input', debounce(()=>renderUserTable(),300)); userPageSize.addEventListener('change', ()=>{userPage=1; renderUserTable();}); userPrev.addEventListener('click', ()=>{ if(userPage>1){userPage--; renderUserTable();}}); userNext.addEventListener('click', ()=>{ const ps=+userPageSize.value; if(userPage*ps < filteredUserRows().length){userPage++; renderUserTable();}});

async function refreshUserTable(){ const s = getSession(); if(!s) return; const snap = await db.ref('app/chamados').orderByChild('analista').equalTo(s.nome).once('value'); const val = snap.val()||{}; userRows = Object.entries(val) .filter(([,r])=>!r.deleted) .map(([id,r])=>({id,...r})) .sort((a,b)=> (a.dataEncaminhamento||'').localeCompare(b.dataEncaminhamento||'')); userPage=1; renderUserTable(); } function filteredUserRows(){ const q=(userSearch.value||'').toLowerCase(); if(!q) return userRows; return userRows.filter(r=>Object.values({ data:r.dataEncaminhamento, chamado:r.chamado, linha:r.linha, equip:r.equipamento, cenario:r.cenario }).join(' ').toLowerCase().includes(q)); } function renderUserTable(){ const rows = filteredUserRows(); const ps = +userPageSize.value; const start=(userPage-1)*ps; const pageRows = rows.slice(start,start+ps); userTableBody.innerHTML=''; const frag = document.createDocumentFragment(); pageRows.forEach(r=>{ const tr = document.createElement('tr'); tr.innerHTML = <td>${r.dataEncaminhamento||''}</td><td>${esc(r.chamado)}</td><td>${esc(r.linha)}</td><td>${esc(r.equipamento)}</td><td>${esc(r.cenario)}</td>; frag.appendChild(tr); }); userTableBody.appendChild(frag); userPageInfo.textContent = ${Math.min(start+1, rows.length)}–${Math.min(start+pageRows.length, rows.length)} de ${rows.length}; }

// -------------------- Admin: Usuários -------------------- const aUNome = document.getElementById('aUNome'); const aUSenha = document.getElementById('aUSenha'); const aUAdmin = document.getElementById('aUAdmin'); const aUAtivo = document.getElementById('aUAtivo'); const btnUserCreate = document.getElementById('btnUserCreate'); const btnUserUpdate = document.getElementById('btnUserUpdate'); const btnUserClear  = document.getElementById('btnUserClear'); const admUsersTableBody = document.querySelector('#admUsersTable tbody'); const admUserSearch = document.getElementById('admUserSearch'); let usersCache = []; let currentUserEditId = null;

btnUserCreate.addEventListener('click', createUser); btnUserUpdate.addEventListener('click', updateUser); btnUserClear.addEventListener('click', ()=>{currentUserEditId=null; aUNome.value=''; aUSenha.value=''; aUAdmin.checked=false; aUAtivo.checked=true; btnUserUpdate.disabled=true;}); admUserSearch.addEventListener('input', debounce(renderUsersTable,300));

async function loadUsers(){ const snap = await db.ref('app/users').once('value'); const val = snap.val()||{}; usersCache = Object.entries(val).map(([id,u])=>({id,...u})); renderUsersTable(); } async function createUser(){ const nome=(aUNome.value||'').trim(); const senha=aUSenha.value||''; if(!nome||!senha) return toast('Nome e senha obrigatórios'); if(usersCache.some(u=>u.nome.toLowerCase()===nome.toLowerCase())) return toast('Nome já existe'); const senhaHash = await hash(senha); const u = { nome, senhaHash, admin: !!aUAdmin.checked, ativo: !!aUAtivo.checked }; await db.ref('app/users').push(u); toast('Usuário criado'); aUNome.value=''; aUSenha.value=''; aUAdmin.checked=false; aUAtivo.checked=true; await loadUsers(); } async function updateUser(){ if(!currentUserEditId) return; const nome=(aUNome.value||'').trim(); const s = getSession(); if(s && s.id===currentUserEditId && !aUAtivo.checked) return toast('Não é possível desativar a si mesmo'); const patch = { nome, admin: !!aUAdmin.checked, ativo: !!aUAtivo.checked }; if(aUSenha.value){ patch.senhaHash = await hash(aUSenha.value); } await db.ref('app/users/'+currentUserEditId).update(patch); toast('Usuário atualizado'); await loadUsers(); } function renderUsersTable(){ const q=(admUserSearch.value||'').toLowerCase(); const rows = usersCache.filter(u=>!q||u.nome.toLowerCase().includes(q)); admUsersTableBody.innerHTML=''; const frag = document.createDocumentFragment(); rows.forEach(u=>{ const tr=document.createElement('tr'); tr.innerHTML = <td>${esc(u.nome)}</td><td>${u.admin?'✔':''}</td><td>${u.ativo?'✔':'✖'}</td><td class="muted">${u.id}</td>; const td = document.createElement('td'); const b1=document.createElement('button'); b1.className='btn'; b1.textContent='Editar'; const b2=document.createElement('button'); b2.className='btn ghost'; b2.textContent='Excluir'; b1.onclick=()=>{ currentUserEditId=u.id; aUNome.value=u.nome; aUSenha.value=''; aUAdmin.checked=!!u.admin; aUAtivo.checked=!!u.ativo; btnUserUpdate.disabled=false; }; b2.onclick=async()=>{ const s=getSession(); if(s && s.id===u.id) return toast('Não é possível excluir a si mesmo'); await db.ref('app/users/'+u.id).remove(); toast('Usuário excluído'); await loadUsers(); }; td.appendChild(b1); td.appendChild(b2); tr.appendChild(td); frag.appendChild(tr); }); admUsersTableBody.appendChild(frag); }

// -------------------- Admin: Chamados (Geral) -------------------- const fInicio = document.getElementById('fInicio'); const fFim = document.getElementById('fFim'); const fEquip = document.getElementById('fEquip'); const fCenario = document.getElementById('fCenario'); const fAnalista = document.getElementById('fAnalista'); const fIncluirExcluidos = document.getElementById('fIncluirExcluidos'); const btnAplicarFiltros = document.getElementById('btnAplicarFiltros'); const btnCSV = document.getElementById('btnCSV'); const admCallsTableBody = document.querySelector('#admCallsTable tbody'); let callsCache = [];

btnAplicarFiltros.addEventListener('click', ()=>{ renderCallsTable(); buildCharts(callsFiltered()); }); btnCSV.addEventListener('click', ()=> exportCSV(callsFiltered(), 'chamados.csv'));

async function loadCalls(){ const snap = await db.ref('app/chamados').once('value'); const val = snap.val()||{}; callsCache = Object.entries(val).map(([id,r])=>({id,...r})); renderCallsTable(); buildCharts(callsFiltered()); } function callsFiltered(){ let rows = [...callsCache]; if(!fIncluirExcluidos.checked) rows = rows.filter(r=>!r.deleted); if(fEquip.value && fEquip.value!=='(Todos)') rows = rows.filter(r=>r.equipamento===fEquip.value); if(fCenario.value && fCenario.value!=='(Todos)') rows = rows.filter(r=>r.cenario===fCenario.value); const a=(fAnalista.value||'').trim().toLowerCase(); if(a) rows = rows.filter(r=> (r.analista||'').toLowerCase().includes(a)); const i=fInicio.value, f=fFim.value; if(i) rows = rows.filter(r=> (r.dataEncaminhamento||'') >= i); if(f) rows = rows.filter(r=> (r.dataEncaminhamento||'') <= f); return rows.sort((a,b)=> (a.dataEncaminhamento||'').localeCompare(b.dataEncaminhamento||'')); } function renderCallsTable(){ const rows = callsFiltered(); admCallsTableBody.innerHTML=''; const frag = document.createDocumentFragment(); rows.forEach(r=>{ const tr=document.createElement('tr'); tr.innerHTML = <td>${r.dataEncaminhamento||''}</td><td>${esc(r.analista)}</td><td>${esc(r.chamado)}</td><td>${esc(r.linha)}</td><td>${esc(r.equipamento)}</td><td>${esc(r.cenario)}</td>; const td=document.createElement('td'); const b1=document.createElement('button'); b1.className='btn'; b1.textContent=r.deleted?'Restaurar':'Excluir'; b1.onclick=()=> softDeleteChamado(r.id, !r.deleted); td.appendChild(b1); tr.appendChild(td); frag.appendChild(tr); }); admCallsTableBody.appendChild(frag); } async function softDeleteChamado(id, del){ await db.ref('app/chamados/'+id).update({deleted: !!del}); await loadCalls(); await refreshUserTable(); }

// -------------------- Dashboard -------------------- function buildCharts(rows){ const by = (key)=> rows.reduce((acc,r)=>{ const k=r[key]||'-'; acc[k]=(acc[k]||0)+1; return acc; },{}); const equip = by('equipamento'); const cenario = by('cenario'); const analista = by('analista');

const k = Object.entries; const top = (obj)=> k(obj).sort((a,b)=> b[1]-a[1]).slice(0,3).map(([n,v])=>${n} (${v})).join(', ')||'-'; document.getElementById('kpiTotal').textContent = Total: ${rows.length}; document.getElementById('kpiTopEquip').textContent = Top Equipamentos: ${top(equip)}; document.getElementById('kpiTopCenario').textContent = Top Cenários: ${top(cenario)}; document.getElementById('kpiTopAnalista').textContent = Top Analista: ${top(analista)};

state.charts.equip = upsertBarChart(state.charts.equip, 'chartEquip', equip); state.charts.cenario = upsertPieChart(state.charts.cenario, 'chartCenario', cenario); state.charts.analista = upsertBarChart(state.charts.analista, 'chartAnalista', analista); } function upsertBarChart(inst, canvasId, obj){ const ctx = document.getElementById(canvasId); const labels = Object.keys(obj); const data = Object.values(obj); if(inst){ inst.data.labels=labels; inst.data.datasets[0].data=data; inst.update(); return inst; } return new Chart(ctx,{ type:'bar', data:{ labels, datasets:[{ label:'Qtd', data }] }, options:{ responsive:true, plugins:{ legend:{display:false}, tooltip:{enabled:true} }, scales:{ y:{ beginAtZero:true } } } }); } function upsertPieChart(inst, canvasId, obj){ const ctx = document.getElementById(canvasId); const labels = Object.keys(obj); const data = Object.values(obj); if(inst){ inst.data.labels=labels; inst.data.datasets[0].data=data; inst.update(); return inst; } return new Chart(ctx,{ type:'doughnut', data:{ labels, datasets:[{ data }] }, options:{ responsive:true, plugins:{ legend:{position:'bottom'} } } }); }

// -------------------- Export CSV -------------------- function exportCSV(rows, filename){ const cols=['dataEncaminhamento','analista','chamado','linha','equipamento','cenario']; const csv = [cols.join(';')].concat(rows.map(r=>cols.map(c=>"${(r[c]??'').toString().replaceAll('"','""')}").join(';'))).join('\n'); const blob = new Blob([csv], {type:'text/csv;charset=utf-8;'}); const url = URL.createObjectURL(blob); const a = document.createElement('a'); a.href=url; a.download=filename; a.click(); URL.revokeObjectURL(url); }

// -------------------- Helpers -------------------- function debounce(fn,ms){ let t; return (...a)=>{ clearTimeout(t); t=setTimeout(()=>fn(...a),ms); }; } function esc(s){ return (s??'').toString().replace(/[&<>"]/g, m=>({"&":"&","<":"<",">":">",""":"""}[m])); }

// -------------------- Tabs -------------------- const tabBtns = Array.from(document.querySelectorAll('.tab')); const tabPanels = { tabUsers: document.getElementById('tabUsers'), tabChamados: document.getElementById('tabChamados'), tabDash: document.getElementById('tabDash') };

tabBtns.forEach(b=> b.addEventListener('click', ()=>{ tabBtns.forEach(x=>x.classList.remove('active')); b.classList.add('active'); Object.values(tabPanels).forEach(p=>p.hidden=true); tabPanels[b.dataset.tab].hidden=false; }));

// -------------------- Init -------------------- (async function init(){ await seedIfEmpty(); await ensureLists(); applyAuthUI(); await loadUsers(); await loadCalls(); })();


